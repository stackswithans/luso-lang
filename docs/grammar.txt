program
 : (usa_stmt)* ( declaration | NEWLINE )* EOF
 ;

usa_stmt
 : USA STRING (COMO IDENTIFIER)? end_stmt
 ;

declaration
  | class_declaration
  | function_declaration
  | stmt
  ;


class_declaration
  : CLASSE IDENTIFIER ( < IDENTIFIER )? class_body FIM
  ;

class_body
  : ( var_declaration | function_declaration | NEWLINE )*


type
  :  IDENTIFIER 
  | LBRACKET type RBRACKET
  ;

function_header
  : IDENTIFIER LPAR formal_parameter_section? RPAR COL (type | VAZIO)
  ;

native_function_decl
  : NATIVA header end_stmt
  ;

function_declaration
  : FUNC (native_function_decl | function_header body FIM)
  ;


body
  :( declaration | NEWLINE )*
  ;


formal_parameter_section
  : IDENTIFIER COLON type (COMMA formal_parameter_section)*
  ;


stmt
  : mostra_stmt
  | escolha_stmt
  | retorna_stmt
  | se_stmt
  | enquanto_stmt
  | para_stmt
  | decl_stmt
  | quebra_stmt
  | continua_stmt
  ;

escolha_stmt
  : ESCOLHA equality COLON 
    (CASO equality COLON body)* 
    (senao equality COLON body)?
    FIM 
  ;

retorna_stmt
  : RETORNA equality? end_stmt
  ;

mostra_stmt
  : MOSTRA equality end_stmt 
  ;

se_stmt
  : SE equality ENTAO body (SENAOSE equality ENTAO body)* (SENAO body)? FIM
  ;

enquanto_stmt
  : ENQUANTO equality FACA body FIM
  ;

para_stmt
  : PARA para_expression FACA body FIM
  ;

end_stmt
  : (SEMI | NEWLINE | EOF)
  ;

para_expression
  : IDENTIFIER DE range_expression
  ;

range_expression
  : equality DDOT equality (inc equality)?
  ;

quebra_stmt
  : QUEBRA end_stmt
  ;

continua_stmt
  : CONTINUA end_stmt
  ;

comp_op
  : GREATER
  | LESSEQ
  | GREATEREQ
  | LESSEQ


eq_op
  : NOTEQUAL
  | DOUBLEEQUAL
  ;

decl_stmt
  : expression (multi_decl|simple_decl)? end_stmt
  ;

multi_decl
  :  (COMMA IDENTIFIER)+ COLON type 
  ;

simple_decl
  :  COLON type assignment?
  ;


expression
  : compound_assignment
  ;


compound_assignment
  : assignment ( compound_operator equality )?
  ;

assignment
  : equality (EQUAL assignment)?
  ;

equality
  : comparison (eq_op comparison)*
  ;

comparison
  : addition (comp_op addition)*
  ;

addition
  : term ( add_operator term)*
  ;

term
  : unary ( multi_operator unary)*
  ;

unary
  : (PLUS | MINUS | NOT) unary
  | call
  ;

call
   : primary ((LPAR args? RPAR | index | DOT IDENTIFIER)* | DOUBLECOLON type)?
   ;


primary
  : INTEGER 
  | REAL
  | STRING
  | FORMAT_STR
  | VERDADEIRO
  | FALSO
  | LPAR equality RPAR
  | LBRACKET type COLON args? RBRACKET
  | IDENTIFIER 
  | EU
  | NULO
  ;

args
  : equality (COMMA equality)*
  ;

index
  : LBRACKET equality RBRACKET
  ;

mult_operator
  : STAR
  | SLASH
  | DOUBLESLASH
  | MODULO
  | AND
  ;

add_operator
  : PLUS
  | MINUS
  | OR
  ;

LINE_COMMENT:
  : '#'; 
